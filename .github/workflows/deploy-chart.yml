name: Deploy Helm Chart

on:
  workflow_dispatch:
    inputs:
      imageRepo:
        description: 'Docker image repository'
        required: false
        default: '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev'
      imageTag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.8.0'

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
          
      # Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
          
      - name: Verify AWS connectivity and permissions
        run: |
          # Show caller identity for debugging
          echo "Current AWS identity:"
          aws sts get-caller-identity
          
          # List clusters to verify access
          echo "Available EKS clusters:"
          aws eks list-clusters --region ap-south-1
          
          # Verify specific cluster exists
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          echo "Checking cluster $CLUSTER_NAME exists:"
          aws eks describe-cluster --name $CLUSTER_NAME --region ap-south-1 --query "cluster.status"

      - name: Configure kubectl with AWS EKS
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="ap-south-1"
          
          # Verify AWS identity again
          echo "Using AWS identity:"
          aws sts get-caller-identity
          
          # Clear any existing kubeconfig completely
          rm -rf ~/.kube
          mkdir -p ~/.kube
          
          # Get cluster details needed for manual setup
          echo "Getting cluster endpoint..."
          ENDPOINT=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION --query "cluster.endpoint" --output text)
          echo "Cluster endpoint: $ENDPOINT"
          
          echo "Getting cluster certificate..."
          CA_DATA=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION --query "cluster.certificateAuthority.data" --output text)
          
          # Create kubeconfig manually with explicit values - using updated apiVersion
          cat > ~/.kube/config << EOF
          apiVersion: v1
          kind: Config
          current-context: eks-$CLUSTER_NAME
          preferences: {}
          clusters:
          - cluster:
              certificate-authority-data: $CA_DATA
              server: $ENDPOINT
            name: eks-$CLUSTER_NAME
          contexts:
          - context:
              cluster: eks-$CLUSTER_NAME
              user: eks-$CLUSTER_NAME
            name: eks-$CLUSTER_NAME
          users:
          - name: eks-$CLUSTER_NAME
            user:
              exec:
                apiVersion: client.authentication.k8s.io/v1beta1
                command: aws
                args:
                  - "eks"
                  - "get-token"
                  - "--cluster-name"
                  - "$CLUSTER_NAME"
                  - "--region"
                  - "$REGION"
          EOF
          
          # Set permissions on kubeconfig
          chmod 600 ~/.kube/config
          
          # Export kubeconfig path
          echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV
          
          # Verify the kubeconfig file exists and has content
          echo "Kubeconfig file size: $(wc -l < ~/.kube/config) lines"
          ls -la ~/.kube/

      - name: Verify Kubernetes connection
        run: |
          echo "Using kubeconfig at $KUBECONFIG"
          
          # Display kubeconfig content
          echo "Kubeconfig content (sanitized):"
          grep -v "certificate-authority-data\|token" ~/.kube/config || true
          
          # Check contexts
          echo "Available contexts:"
          kubectl config get-contexts
          
          # Simple direct kubectl command to verify connectivity
          kubectl cluster-info
          
          # If needed, try a more direct token approach
          if [ $? -ne 0 ]; then
            echo "Trying direct token approach..."
            TOKEN=$(aws eks get-token --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --region ap-south-1 --output json | jq -r '.status.token')
            ENDPOINT=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')
            curl -s --header "Authorization: Bearer $TOKEN" --insecure $ENDPOINT/api/v1/namespaces
          fi

      - name: Create namespaces
        run: |
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Helm Chart to Development
        if: github.ref == 'refs/heads/dev'
        run: |
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"
          
          helm upgrade --install webapp ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/dev.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n dev

      - name: Deploy Helm Chart to Production
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"
          
          helm upgrade --install webapp ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/prod.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n production





