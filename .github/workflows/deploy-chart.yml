name: Deploy Helm Chart (Token Only - Zero Downtime)

on:
  workflow_dispatch:
    inputs:
      imageRepo:
        description: 'Docker image repository'
        required: false
        default: '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev'
      imageTag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      # üßæ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚öôÔ∏è Install Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'

      # ‚öôÔ∏è Install kubectl
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # üîê Configure kubeconfig using K8s ServiceAccount token
      - name: Configure kubectl with ServiceAccount Token
        env:
          K8S_SERVER: https://8E8E0B619BB89BD85A4298A1A6C979C3.gr7.ap-south-1.eks.amazonaws.com
          K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
        run: |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${K8S_SERVER}
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: sa-user
            name: eks-context
          current-context: eks-context
          users:
          - name: sa-user
            user:
              token: ${K8S_TOKEN}
          EOF

      # üîç Verify cluster access
      - name: Verify Kubernetes Connection
        run: |
          echo "üîç Checking cluster connectivity..."
          kubectl cluster-info || exit 1
          kubectl get nodes -o wide || echo "‚ö†Ô∏è No nodes listed - check RBAC permissions"

      # üèóÔ∏è Ensure namespaces exist
      - name: Create Namespaces
        run: |
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      # =========================
      # üöÄ DEPLOYMENT TO DEV
      # =========================
      - name: Deploy Helm Chart to Dev
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "‚öôÔ∏è Starting Dev deployment..."

          NS="dev"
          RELEASE="webapp-dev"
          DEPLOYMENT_NAME="webapp-dev"
          SERVICE_NAME="webapp-dev"
          INGRESS_NAME="webapp-dev-ingress"
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"

          # üß© Adopt Deployment
          if kubectl get deployment $DEPLOYMENT_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing deployment $DEPLOYMENT_NAME..."
            kubectl -n $NS annotate deployment $DEPLOYMENT_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label deployment $DEPLOYMENT_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi

          # üß© Adopt Service
          if kubectl get svc $SERVICE_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing service $SERVICE_NAME..."
            kubectl -n $NS annotate svc $SERVICE_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label svc $SERVICE_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi

          # üß© Adopt Ingress
          if kubectl get ingress $INGRESS_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing ingress $INGRESS_NAME..."
            kubectl -n $NS annotate ingress $INGRESS_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label ingress $INGRESS_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi
          
          # üß© Adopt ConfigMap
          if kubectl get configmap $RELEASE-nginx-config -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing configmap $RELEASE-nginx-config..."
            kubectl -n $NS annotate configmap $RELEASE-nginx-config \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label configmap $RELEASE-nginx-config app.kubernetes.io/managed-by=Helm --overwrite
          fi

          echo "üöÄ Running Helm upgrade/install for Dev..."
          helm upgrade --install $RELEASE ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/dev.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n $NS

      # =========================
      # üöÄ DEPLOYMENT TO PRODUCTION
      # =========================
      - name: Deploy Helm Chart to Production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "‚öôÔ∏è Starting Production deployment..."

          NS="production"
          RELEASE="webapp-prod"
          DEPLOYMENT_NAME="webapp-prod"
          SERVICE_NAME="webapp-prod"
          INGRESS_NAME="webapp-prod-ingress"
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"

          # üß© Adopt Deployment
          if kubectl get deployment $DEPLOYMENT_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing deployment $DEPLOYMENT_NAME..."
            kubectl -n $NS annotate deployment $DEPLOYMENT_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label deployment $DEPLOYMENT_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi

          # üß© Adopt Service
          if kubectl get svc $SERVICE_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing service $SERVICE_NAME..."
            kubectl -n $NS annotate svc $SERVICE_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label svc $SERVICE_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi

          # üß© Adopt Ingress
          if kubectl get ingress $INGRESS_NAME -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing ingress $INGRESS_NAME..."
            kubectl -n $NS annotate ingress $INGRESS_NAME \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label ingress $INGRESS_NAME app.kubernetes.io/managed-by=Helm --overwrite
          fi
          
          # üß© Adopt nginx ConfigMap
          if kubectl get configmap $RELEASE-nginx-config -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing configmap $RELEASE-nginx-config..."
            kubectl -n $NS annotate configmap $RELEASE-nginx-config \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label configmap $RELEASE-nginx-config app.kubernetes.io/managed-by=Helm --overwrite
          fi
          
          # üß© Adopt app ConfigMap
          if kubectl get configmap $RELEASE-config -n $NS >/dev/null 2>&1; then
            echo "üîÑ Adopting existing configmap $RELEASE-config..."
            kubectl -n $NS annotate configmap $RELEASE-config \
              meta.helm.sh/release-name=$RELEASE \
              meta.helm.sh/release-namespace=$NS --overwrite
            kubectl -n $NS label configmap $RELEASE-config app.kubernetes.io/managed-by=Helm --overwrite
          fi

          echo "üöÄ Running Helm upgrade/install for Production..."
          helm upgrade --install $RELEASE ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/prod.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n $NS
