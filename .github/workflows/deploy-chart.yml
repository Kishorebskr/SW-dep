name: Helm Chart Deployment (Dev + Prod) — Zero Downtime

on:
  workflow_dispatch:
    inputs:
      imageRepo:
        description: "Docker image repository (ECR)"
        required: false
        default: "990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev"
      imageTag:
        description: "Docker image tag"
        required: false
        default: "latest"

  push:
    branches:
      - dev
      - main

env:
  K8S_SERVER: https://941FE0069C621BEA124D8F22E7C62B1F.gr7.ap-south-1.eks.amazonaws.com
  K8S_TOKEN: ${{ secrets.K8S_TOKEN }}

jobs:
  # Deploy to DEV environment when dev branch is pushed
  deploy-dev:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-22.04
    name: Deploy to DEV

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.13.0"

      # Setup Kubectl
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # Configure kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${K8S_SERVER}
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: sa-user
            name: eks-context
          current-context: eks-context
          users:
          - name: sa-user
            user:
              token: ${K8S_TOKEN}
          EOF

      # Verify cluster access
      - name: Verify Cluster Access
        run: |
          echo "Checking cluster connectivity..."
          kubectl cluster-info
          kubectl get nodes -o wide

      # Ensure namespace exists
      - name: Ensure Namespace Exists
        run: |
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

      # Adopt existing resources
      - name: Adopt Existing Resources
        run: |
          RELEASE=webapp-dev
          NS=dev
          for TYPE in deployment svc ingress configmap; do
            for NAME in $(kubectl get $TYPE -n $NS --no-headers -o custom-columns=":metadata.name" | grep $RELEASE || true); do
              echo "Adopting $TYPE $NAME ..."
              kubectl -n $NS annotate $TYPE $NAME meta.helm.sh/release-name=$RELEASE meta.helm.sh/release-namespace=$NS --overwrite
              kubectl -n $NS label $TYPE $NAME app.kubernetes.io/managed-by=Helm --overwrite
            done
          done

      # Deploy Helm chart
      - name: Deploy Helm Chart — DEV
        working-directory: ./helm-gitops-project
        run: |
          echo "Deploying webapp-dev to dev namespace ..."
          helm upgrade --install webapp-dev ./charts/webapp \
            --values charts/webapp/values/dev.yaml \
            --set image.repository=${{ github.event.inputs.imageRepo }} \
            --set image.tag=${{ github.event.inputs.imageTag }} \
            -n dev --atomic --timeout 10m0s --wait

      # Post-deploy verification
      - name: Verify Deployment — DEV
        run: |
          echo "Checking DEV resources ..."
          kubectl get all -n dev | grep webapp-dev || true
          kubectl rollout status deployment/webapp-dev -n dev --timeout=180s
          kubectl get ingress -n dev | grep webapp-dev || true

  # Deploy to PROD environment when main branch is pushed
  deploy-prod:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-22.04
    name: Deploy to PROD

    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.13.0"

      # Setup Kubectl
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # Configure kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${K8S_SERVER}
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: sa-user
            name: eks-context
          current-context: eks-context
          users:
          - name: sa-user
            user:
              token: ${K8S_TOKEN}
          EOF

      # Verify cluster access
      - name: Verify Cluster Access
        run: |
          echo "Checking cluster connectivity..."
          kubectl cluster-info
          kubectl get nodes -o wide

      # Ensure namespace exists
      - name: Ensure Namespace Exists
        run: |
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      # Adopt existing resources
      - name: Adopt Existing Resources
        run: |
          RELEASE=webapp-prod
          NS=production
          for TYPE in deployment svc ingress configmap; do
            for NAME in $(kubectl get $TYPE -n $NS --no-headers -o custom-columns=":metadata.name" | grep $RELEASE || true); do
              echo "Adopting $TYPE $NAME ..."
              kubectl -n $NS annotate $TYPE $NAME meta.helm.sh/release-name=$RELEASE meta.helm.sh/release-namespace=$NS --overwrite
              kubectl -n $NS label $TYPE $NAME app.kubernetes.io/managed-by=Helm --overwrite
            done
          done

      # Deploy Helm chart
      - name: Deploy Helm Chart — PROD
        working-directory: ./helm-gitops-project
        run: |
          echo "Deploying webapp-prod to production namespace ..."
          helm upgrade --install webapp-prod ./charts/webapp \
            --values charts/webapp/values/prod.yaml \
            --set image.repository=${{ github.event.inputs.imageRepo }} \
            --set image.tag=${{ github.event.inputs.imageTag }} \
            -n production --atomic --timeout 10m0s --wait

      # Post-deploy verification
      - name: Verify Deployment — PROD
        run: |
          echo "Checking PROD resources ..."
          kubectl get all -n production | grep webapp-prod || true
          kubectl rollout status deployment/webapp-prod -n production --timeout=180s
          kubectl get ingress -n production | grep webapp-prod || true
