name: Deploy Helm Chart

on:
  workflow_dispatch:
    inputs:
      imageRepo:
        description: "Docker image repository"
        required: false
        default: "990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev"
      imageTag:
        description: "Docker image tag"
        required: false
        default: "latest"
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------
      # 1. Checkout repository
      # ----------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ----------------------------
      # 2. Install prerequisites
      # ----------------------------
      - name: Install CLI tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip curl
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # ----------------------------
      # 3. Install AWS CLI v2
      # ----------------------------
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # ----------------------------
      # 4. Configure AWS credentials
      # ----------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # ----------------------------
      # 5. Verify AWS identity and EKS access
      # ----------------------------
      - name: Verify AWS identity and EKS cluster
        run: |
          echo "üîç Checking AWS Identity..."
          aws sts get-caller-identity
          
          echo "üîç Listing available EKS clusters..."
          aws eks list-clusters --region ap-south-1
          
          echo "üîç Describing cluster..."
          aws eks describe-cluster --name "${{ secrets.EKS_CLUSTER_NAME }}" --region ap-south-1 --query "cluster.status"

      # ----------------------------
      # 6. Configure kubectl access for EKS
      # ----------------------------
      - name: Configure kubectl for EKS
        run: |
          REGION="ap-south-1"
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          
          echo "üß© Setting up kubeconfig..."
          mkdir -p ~/.kube
          rm -f ~/.kube/config
          aws eks update-kubeconfig --region "$REGION" --name "$CLUSTER_NAME" --alias eks-github
          
          echo "‚úÖ kubeconfig configured successfully."
          echo "üîç Cluster info:"
          kubectl cluster-info
          echo "üîç Nodes:"
          kubectl get nodes || echo "‚ö†Ô∏è Unable to list nodes (check RBAC)."

      # ----------------------------
      # 7. Grant GitHub IAM access to EKS (one-time auto patch)
      # ----------------------------
      - name: Grant GitHub IAM access to EKS (one-time auto patch)
        run: |
          echo "üîß Patching aws-auth ConfigMap to include GitHub IAM user..."
          AWS_USER_ARN=$(aws sts get-caller-identity --query Arn --output text)
          echo "Detected GitHub IAM ARN: $AWS_USER_ARN"
          
          # This command requires the user who created the cluster to have already mapped the role.
          # If this fails, it's because the initial permissions to edit aws-auth are missing.
          if ! kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml; then
            echo "‚ùå Failed to get aws-auth ConfigMap. The IAM user/role '$AWS_USER_ARN' likely lacks initial permissions."
            echo "Please ensure the user/role that created the EKS cluster has mapped this role in the aws-auth ConfigMap."
            exit 1
          fi

          if ! grep -q "$AWS_USER_ARN" aws-auth.yaml; then
            echo "üß© Adding missing IAM user mapping..."
            # Using yq to add the user to mapUsers
            yq eval ".data.mapUsers += \"- userarn: $AWS_USER_ARN\n  username: github-actions\n  groups:\n    - system:masters\n\"" -i aws-auth.yaml
            kubectl apply -f aws-auth.yaml -n kube-system
            echo "‚úÖ GitHub IAM user mapped successfully."
          else
            echo "‚úÖ GitHub IAM user already exists in aws-auth."
          fi

          echo "üîß Adding role mapping to aws-auth ConfigMap..."
          yq eval ".data.mapRoles += \"- rolearn: arn:aws:iam::222964728025:role/GitHubActions-EKS-Deploy-Role\n  username: github-actions\n  groups:\n    - system:masters\n\"" -i aws-auth.yaml
          kubectl apply -f aws-auth.yaml -n kube-system
          echo "‚úÖ Role mapping added successfully."

      # ----------------------------
      # 8. Install Helm
      # ----------------------------
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.14.4"

      # ----------------------------
      # 9. Verify Kubernetes connectivity
      # ----------------------------
      - name: Verify Kubernetes connection
        run: |
          echo "üîç Current context:"
          kubectl config current-context
          
          echo "üîç Namespaces available:"
          kubectl get ns

      # ----------------------------
      # 10. Create namespaces (idempotent)
      # ----------------------------
      - name: Create namespaces
        run: |
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      # ----------------------------
      # 11. Deploy Helm Chart to DEV
      # ----------------------------
      - name: Deploy Helm Chart to Development
        if: github.ref == 'refs/heads/dev'
        run: |
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"
          
          echo "üöÄ Deploying to Development environment..."
          helm upgrade --install webapp ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/dev.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n dev \
            --create-namespace
          
          echo "‚úÖ Development deployment completed successfully."

      # ----------------------------
      # 12. Deploy Helm Chart to PROD
      # ----------------------------
      - name: Deploy Helm Chart to Production
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_REPO="${{ github.event.inputs.imageRepo || '990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev' }}"
          IMAGE_TAG="${{ github.event.inputs.imageTag || 'latest' }}"
          
          echo "üöÄ Deploying to Production environment..."
          helm upgrade --install webapp ./helm-gitops-project/charts/webapp \
            --values ./helm-gitops-project/charts/webapp/values/prod.yaml \
            --set image.repository=$IMAGE_REPO \
            --set image.tag=$IMAGE_TAG \
            -n production \
            --create-namespace
          
          echo "‚úÖ Production deployment completed successfully."
