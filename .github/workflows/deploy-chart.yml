name: Deploy Helm Chart (Zero Downtime)

on:
  workflow_dispatch:
    inputs:
      imageRepo:
        description: "Docker image repository"
        required: false
        default: "990060748279.dkr.ecr.us-east-1.amazonaws.com/swapp-dev"
      imageTag:
        description: "Docker image tag"
        required: false
        default: "latest"

  push:
    branches:
      - main
      - dev

jobs:
  # --------------------------------------------------------
  # 🧱 Deploy to DEV environment when dev branch is pushed
  # --------------------------------------------------------
  deploy-dev:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-22.04

    # 🧠 Dynamically choose environment based on branch
    strategy:
      matrix:
        include:
          - branch: dev
            name: dev
            release: webapp-dev
            namespace: dev
            valuesFile: charts/webapp/values/dev.yaml
          - branch: main
            name: prod
            release: webapp-prod
            namespace: production
            valuesFile: charts/webapp/values/prod.yaml

    if: github.ref == 'refs/heads/' + matrix.branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.13.0"

      # ⚙️ Setup kubectl
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # 🔐 Configure kubeconfig using ServiceAccount Token
      - name: Configure kubeconfig
        env:
          K8S_SERVER: https://8E8E0B619BB89BD85A4298A1A6C979C3.gr7.ap-south-1.eks.amazonaws.com
          K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
        run: |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${K8S_SERVER}
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: sa-user
            name: eks-context
          current-context: eks-context
          users:
          - name: sa-user
            user:
              token: ${K8S_TOKEN}
          EOF

      - name: Verify Kubernetes Connection
        run: |
          kubectl cluster-info
          kubectl get nodes -o wide || true

      # 🏗️ Create namespace if not exists
      - name: Ensure Namespace Exists
        run: |
          kubectl create namespace ${{ matrix.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      # 🧩 Adopt existing resources (zero downtime)
      - name: Adopt Existing Resources
        run: |
          echo "🔄 Adopting existing resources for ${{ matrix.release }}..."
          NS=${{ matrix.namespace }}
          RELEASE=${{ matrix.release }}
          for TYPE in deployment svc ingress configmap; do
            for NAME in $(kubectl get $TYPE -n $NS --no-headers -o custom-columns=":metadata.name" | grep $RELEASE || true); do
              echo "🔄 Adopting $TYPE $NAME ..."
              kubectl -n $NS annotate $TYPE $NAME meta.helm.sh/release-name=$RELEASE meta.helm.sh/release-namespace=$NS --overwrite
              kubectl -n $NS label $TYPE $NAME app.kubernetes.io/managed-by=Helm --overwrite
            done
          done

      # 🚀 Deploy Helm chart
      - name: Deploy Helm Chart — ${{ matrix.name }}
        working-directory: ./helm-gitops-project
        run: |
          echo "🚀 Deploying ${{ matrix.release }} to namespace ${{ matrix.namespace }} ..."
          helm upgrade --install ${{ matrix.release }} ./charts/webapp \
            --values ${{ matrix.valuesFile }} \
            --set image.repository=${{ github.event.inputs.imageRepo }} \
            --set image.tag=${{ github.event.inputs.imageTag }} \
            -n ${{ matrix.namespace }} \
            --atomic --timeout 10m0s --wait

      # ✅ Post-deploy verification
      - name: Verify Deployment — ${{ matrix.name }}
        run: |
          NS=${{ matrix.namespace }}
          RELEASE=${{ matrix.release }}
          echo "🔎 Checking resources in namespace $NS ..."
          kubectl get all -n $NS | grep $RELEASE || true
          echo "✅ Waiting for rollout..."
          kubectl rollout status deployment/${RELEASE} -n $NS --timeout=180s
          echo "🌐 Ingress info:"
          kubectl get ingress -n $NS | grep $RELEASE || true
